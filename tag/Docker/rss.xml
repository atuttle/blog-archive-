<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>github.com/atuttle/blog</title>
   
   <link>http://adamtuttle.codes</link>
   <description>It's one thing to write code. It's another to humanize technology so it serves a purpose in people's lives. &mdash; Luke Wroblewski</description>
   <language>en-us</language>
   <managingEditor> Adam Tuttle</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>TIL: Adding an SSL Cert to the JVM Inside a Docker Image</title>
	  <link>//TIL-adding-a-jvm-ssl-cert-docker/</link>
	  <author>Adam Tuttle</author>
	  <pubDate>2016-06-27T09:00:00-04:00</pubDate>
	  <guid>//TIL-adding-a-jvm-ssl-cert-docker/</guid>
	  <description><![CDATA[
	     <p>I&#39;ve been playing with Docker lately for a bunch of reasons, but topping that list is that it&#39;s everything I ever wanted out of Vagrant, and then some. (And what better thing to do on a camping trip after the kids are tucked into bed?) In some ways, the Dockerfile syntax is what I wish the Vagrantfile syntax was (shell script instead of Ruby). Anyway, here&#39;s a solution to an interesting problem I ran into today.</p>

<p>I need to make HTTP requests to the <a href="https://mailgun.com/app/dashboard">mailgun</a> API and their certificate isn&#39;t valid given the JVM cert store that I&#39;m inheriting in my Docker image. Of course, I just need to download and import the certificate, but it took me a little while to wrap my mind around the idiomatic Docker way of doing this.</p>

<p>After some hints from <a href="http://ryanguill.com/">Ryan</a> (to whom I owe cases and cases of beer for similarly helpful advice), and a little more googling and trial and error, this is what I came up with. In my Dockerfile, I&#39;ve added:</p>
<div class="highlight"><pre><code class="language-Dockerfile" data-lang="Dockerfile">COPY ./res/mailgun.net.crt /opt/lucee/
<span class="k">ENV</span> LUCEE_CACERTS /opt/lucee/server/lucee-server/context/security/cacerts
<span class="k">RUN</span> keytool -noprompt -storepass password_here -import -alias mailgun -keystore <span class="k">${</span><span class="nv">LUCEE_CACERTS</span><span class="k">}</span> -file /opt/lucee/mailgun.net.crt
</code></pre></div>
<p>After copying my downloaded mailgun certificate file into the Docker image, I use the <code>keytool</code> command with options <code>-noprompt -storepass</code> to import it without prompting me for the store password.</p>

<p>As a refresher, to find all <code>cacerts</code> files on your (linux) machine, try this:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">find / -iname &#39;cacerts&#39;
</code></pre></div>
<p>This will list all files named cacerts on the system. In my Docker image, there were 4. I picked the one associated with <a href="http://lucee.org/">Lucee</a> because that&#39;s the app server I&#39;m working with in this case, but it&#39;s possible that importing to the JVM&#39;s store could have worked too. I just got lucky on my first guess, so I stopped there.</p>

	  ]]></description>
	</item>


</channel>
</rss>
