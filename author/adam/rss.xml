<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>github.com/atuttle/blog</title>
   
   <link>http://adamtuttle.codes</link>
   <description>It's one thing to write code. It's another to humanize technology so it serves a purpose in people's lives. &mdash; Luke Wroblewski</description>
   <language>en-us</language>
   <managingEditor> Adam Tuttle</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Extra-Life 2016</title>
	  <link>//extra-life-2016/</link>
	  <author>Adam Tuttle</author>
	  <pubDate>2016-11-15T05:00:00-05:00</pubDate>
	  <guid>//extra-life-2016/</guid>
	  <description><![CDATA[
	     <p>It is that time of year again! Time for me to beg you for donations to, in my opinion, one of the most honorable causes there is: The wellbeing of children.</p>

<iframe src="http://www.extra-life.org/index.cfm?fuseaction=widgets.200x420thermo&participantID=212112" width="202" height="422" frameborder="0" scrolling="no" style="margin:0 auto;"><a href="http://www.extra-life.org/index.cfm?fuseaction=donorDrive.participant&participantID=212112">Make a Donation!</a></iframe>

<p><br/>For the uninitiated, Extra-Life is a charity that raises money for <a href="https://chop.childrensmiraclenetworkhospitals.org/">Children&#39;s Miracle Network Hospitals</a>, who support children in the hospital, often for scary stuff like a heart condition or cancer, when their families can&#39;t. All of the money that I raise gets earmarked for the <a href="http://www.chop.edu/">Children&#39;s Hospital of Pennsylvania</a>, headquartered here in Philadelphia and serving the entire state.</p>

<p>Donations are tax-deductible and secure, and Children&#39;s Miracle Network is so transparent and responsible with how they spend collected donations that they are <a href="http://www.charitynavigator.org/index.cfm?bay=search.summary&amp;orgid=5756">rated 4/4 stars on Charity Navigator</a>.</p>

<p>I believe it was last year around this time that my niece had open heart surgery. She just had another one last week. She has an artificial heart valve and a pacemaker. She&#39;s still at CHOP recovering. <em>She&#39;s 4 years old.</em> She is fortunate enough to have been adopted by a family with good health insurance; but not everyone is. And that is why I do this every year. For kids who have done nothing wrong but who are born with a heart defect, or get cancer, or get hurt in a car accident. They deserve our love and our support, and the healthcare system in this country will sideline them if we don&#39;t step up to the plate.</p>

<p>So I play games on their behalf in the hope that you will skip a cup of coffee and donate a few dollars instead. Sure it&#39;s fun, but it&#39;s also a constant reminder of how fragile life is and how lucky we are to be alive right now.</p>

<h2>Get something in return</h2>

<p>This year I thought I would sweeten the pot, too:</p>

<p><a href="http://restassuredbook.com"><img src="/assets/images/posts/2016/rest-assured-extra-life.png" alt="Flyer for my book deal"></a></p>

<p>From now until we start playing (that&#39;s 8:00 am US-Eastern on 11/19), 100% of profits earned through the <a href="http://restassuredbook.com">sales of my book</a> will be donated to my campaign. The book costs $19 and my cut &ndash;$17.80&ndash; will go to charity.</p>

<h2>Streaming Live?</h2>

<p>In recent years I&#39;ve spent the majority of the time on a Google Hangout, but I thought I might try streaming it live on Facebook this year.</p>

<h2>Please Donate!</h2>

<iframe src="http://www.extra-life.org/index.cfm?fuseaction=widgets.250x170ribbon&participantID=212112" width="252" height="172" frameborder="0" scrolling="no" style="margin:0 auto;"><a href="http://www.extra-life.org/index.cfm?fuseaction=donorDrive.participant&participantID=212112">Make a Donation!</a></iframe>

	  ]]></description>
	</item>

	<item>
	  <title>The Cost of Abstraction</title>
	  <link>//the-cost-of-abstraction/</link>
	  <author>Adam Tuttle</author>
	  <pubDate>2016-10-07T07:00:00-04:00</pubDate>
	  <guid>//the-cost-of-abstraction/</guid>
	  <description><![CDATA[
	     <p>Earlier today a friend and colleague who is almost 40 sent me a link to this article: <a href="http://www.bennorthrop.com/Essays/2016/reflections-of-an-old-programmer.php">Reflections of an &quot;Old&quot; Programmer</a>. I&#39;m 34, so still a few years shy of Ben, but I have been starting to get the feeling that I&#39;m an &quot;old&quot; coder too. So hopefully my thoughts in response aren&#39;t too far off-base.</p>

<p>I think the motivation for Ben&#39;s post is correct:</p>

<blockquote>
<p>Without ... effort, we could be worse at our jobs in 5 years than we are today. There is no coasting.</p>
</blockquote>

<p>But his metaphors are full of holes and his thesis of knowledge decay is too broad. Allow me to explain.</p>

<h3>Metaphors revisited</h3>

<p><a href="https://en.wikipedia.org/wiki/Ignaz_Semmelweis">Ignaz Semmelweis</a>, a Hungarian doctor in the mid 1800s, was ridiculed because he believed that microscopic living organisms could reside on your skin and be transmitted from one patient to the next, spreading disease. Of course today we understand about bacteria and viruses and we wash our hands between surgeries.</p>

<p>Ben asserts that doctors (probably) don&#39;t find themselves constantly dealing with knowledge decay and the threat of getting worse at their jobs over time:</p>

<blockquote>
<p>The doctor at 40 doesn&#39;t seem to be worried about discovering that all his knowledge of the vascular system is about to evaporate in favor of some new organizing theory. The same goes for the lawyer, the plumber, the accountant, or the english teacher.</p>
</blockquote>

<p>While there is a nugget of truth in this quote (more on that in a moment), I would assert in response that Ben probably doesn&#39;t know too many doctors, lawyers, plumbers, accountants, or teachers. Or at least he doesn&#39;t ask them about their Continuing Learning Efforts.</p>

<p>Your family doctor probably attends at least once conference a year, and very likely <em>regularly</em> attends lunch-and-learn sessions paid for by pharmaceutical companies where she gets free lunch in exchange for learning about the company&#39;s new drugs: How they work, what they do, and what off-label uses they might be good for, to name just a few things. I have friends that were pharma reps and friends that are doctors, and I&#39;m speaking from first-hand conversations with them.</p>

<p>Anyone remember &quot;New Math&quot;? Ben&#39;s parents were probably complaining about it when he was in 6th-10th grade, if my math is correct. Teachers were learning and applying new techniques for helping kids to understand mathematical concepts. The same is probably true for reading, writing, and other concepts too. And we&#39;re going through it again now: What people often refer to as &quot;common core&quot; (which I support) &ndash;which is actually just a new program put in place to <em>satisfy</em> common core&ndash; is an updated approach to teaching based on scientific research on the subject.</p>

<p>Lawyers must be aware of new laws and precedents. Accountants have to keep up with the latest loop-holes to help their billionaire clients avoid paying taxes. Plumbers need to know about new materials (my house is plumbed with PEX pipes) and tools.</p>

<p>In all of these cases, if someone abandons learning new things the day they get their first job they will not have a very long career at all.</p>

<h3>That nugget of truth</h3>

<blockquote>
<p>The doctor at 40 doesn&#39;t seem to be worried about discovering that all his knowledge of the vascular system is about to evaporate in favor of some new organizing theory.</p>
</blockquote>

<p>This part is right, though. The vascular system is well understood and documented, and the hardware is unlikely to change drastically over the course of a doctor&#39;s career. Except artificial blood vessels and hearts and whatever other medical innovations come along in the next 40 years...</p>

<p>There are certain concepts in any field, which I&#39;ll refer to as &quot;core concepts,&quot; that have a half life of much longer than the average human lifespan, if not effectively infinite.</p>

<p>Looping, Branching, Recursion: These are all programming core concepts that you will not likely find yourself abandoning for new approaches in our lifetime. Not unless there are major breakthroughs in Quantum Computing, followed by mass market production of quantum computers to make them as common as PCs are today. These are the vascular and nervous systems of the computer: You&#39;re speaking using concepts born at a lower level of abstraction, even if you&#39;re using a 4th or 5th generation language.</p>

<p>In the beginning there were 1st generation languages: byte code punched into cards. Then there were 2nd generation languages that abstracted a collection of bytecode commands into a single command that could be written with letters and numbers in a text file, i.e. Assembly. 3rd generation languages like C abstract collections of 2GL commands into a single line of code. And repeat for 4th and 5th generation languages.</p>

<p>Each layer of abstraction exists because it &quot;makes hard things easier&quot; than the previous generation. But we&#39;re at a point now where we&#39;ve based our knowledge on something 4 or 5 layers of abstraction away from implementation. And because of that, things change more frequently.</p>

<p>The problems that these JavaScript frameworks du jour are attempting to solve are simply not solved: The scientists (programmers) are still experimenting with different methods and techniques, and no consensus has been reached on the best ways to tackle these problems. Nor is it likely to be in our lifetime. So in this limited scope, I agree with Ben: the half-lives of these things are low when contrasted with core concepts.</p>

<p>It is these higher layers of abstraction that are changing, not the core concepts. When you switch to a new tool or framework, recursion still works the same way it used to.</p>

<p>You can&#39;t compare your highly abstracted concepts to the core concepts of another profession and proclaim that our industry is just different. That we churn more knowledge. We don&#39;t. Drugs get discontinued. Lead paint and leaded gasoline (and if you&#39;re me, you&#39;re hoping gasoline altogether!) are on their way out. Every industry evolves.</p>

<p><strong>This is the cost of working at a high level of abstraction.</strong></p>

<h3>The result is the same</h3>

<p>Even with all of the above nit-picking, I agree with Ben&#39;s conclusion: Focus on learning the core concepts of your field well and they will serve you well for a long time to come. For everything else, don&#39;t rush to be an early adopter, and wait for some amount of consensus to grow before you dive in head-first.</p>

<p>Early adoption is for &quot;kids&quot; (pre-30&#39;s) that have time to be burned by bad decisions and recover from those burns. Us old-folks need to focus on stability and sustainability.</p>

<p>But I still think React Native looks pretty neat.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Giggle Driven Development</title>
	  <link>//giggle-driven-development/</link>
	  <author>Adam Tuttle</author>
	  <pubDate>2016-09-30T05:00:00-04:00</pubDate>
	  <guid>//giggle-driven-development/</guid>
	  <description><![CDATA[
	     <p>Yesterday morning while spending time with my kids before they left for school, and completely by accident, I found myself on a website making use of some really neat technology that made programming problems and lego-block style &quot;coding&quot; of solutions really novel, simple, and approachable. We had a bunch of fun working on some of the problems together, and I feel compelled to share.</p>

<p><img src="/assets/images/posts/2016/giggle-fail-algorithm.png" alt="Sample (wrong) source code"></p>

<p>The technology is called <a href="https://developers.google.com/blockly/">Blockly</a> (by Google), and <a href="https://blockly-games.appspot.com/">these are the games we played</a>.</p>

<p>The games start out with a simple puzzle mechanic that teaches you how to snap the puzzle pieces (that will later become &quot;code&quot;) together, and then moves on to the most basic form of coding challenges. The challenges get successively harder as you go, requiring the understanding of a new concept to complete each level.</p>

<p>This feels like a very natural next step after <a href="http://www.robotturtles.com/">Robot Turtles</a>, a board game that teaches beginning programming concepts. I backed it on kickstarter and my kids and I enjoy breaking it out from time to time. Two things that Robot Turtles lacks and that Blockly introduces pretty early on are branching (if/else) and looping constructs. Those concepts would be really hard to model out with a deck of cards laid out on a table &ndash; the mechanic used in Robot Turtles &ndash; but the snap-together pieces approach in Blockly actually works pretty well.</p>

<p><img src="/assets/images/posts/2016/giggle-fail.jpg" alt="A screen shot of one of our failed attempts, which elicited much laughter"></p>

<p>But the thing that really sucked my kids in was what happens when you fail. Instead of just making a &quot;you can&#39;t do that&quot; noise and stopping the little maze-wanderer dead in its tracks, the astronaut flies off into space. If you&#39;re playing with the default skin that resembles Google Maps then it sounds like the character walks into a wall. Hard. And if you&#39;re using the panda theme, it makes some sort of &quot;mew&quot; noise and then falls off of the bottom of the screen.</p>

<p>That accidental joy: turning a failure into laughter; that&#39;s what drew my kids in and made them want to do more. They sought out more failures, and in doing so, learned more about the concepts being taught. Not because they wanted to learn more about programming, but because they thought it was hilarious when the astronaut floated off into space and they wanted to understand how to make it happen again, intentionally.</p>

<p><img src="/assets/images/posts/2016/giggle-scratch.png" alt="A screen shot of MIT Scratch"></p>

<p>In the past, I&#39;ve tried introducing them to <a href="https://scratch.mit.edu/">MIT&#39;s Scratch</a>, but it never seemed to interest them. From what I&#39;ve seen so far, Scratch can be quite a bit more complex, though the only thing I&#39;ve seen done with it is to make (sometimes interactive) animations. Maybe once they get some more time in with Blockly they&#39;ll be more interested in Scratch. Or maybe my kids are puzzle gamers, and just not interested in creating animations.</p>

<p>But clearly the hilarious (to a 5 and 7 year old) way that failure happens in these Blockly games is part of what makes them so appealing.</p>

<p>And what can we learn from this as we create interfaces for non-technical users in business applications? We aren&#39;t teaching them to write code, but if we can turn their mistakes into something that makes them <em>want</em> to spend more time using the application, I would consider that a win.</p>

<p>How cool would it be to have some negative behavior in your app enable <a href="https://github.com/codeinthedark/awesome-power-mode">Power Mode</a> instead of some boring &quot;You can&#39;t do that&quot; validation? I don&#39;t know when it would be appropriate to do so (outside of, perhaps, April Fools) but it strikes me as the type of thing that is harmless and would elicit joy from the users, if used sparingly.</p>

<p><small><a href="https://www.flickr.com/photos/philiproeland/12100005003">Photo credit</a></small></p>

	  ]]></description>
	</item>

	<item>
	  <title>My Experience With AWS Reserved EC2 Instances and Deploying Docker in Production</title>
	  <link>//AWS-Reserved-and-Docker-in-production/</link>
	  <author>Adam Tuttle</author>
	  <pubDate>2016-09-06T05:00:00-04:00</pubDate>
	  <guid>//AWS-Reserved-and-Docker-in-production/</guid>
	  <description><![CDATA[
	     <p>This is going to be more field-notes than how-to, but when I tweeted about how I had such an easy experience getting some Docker containers running in production I had several people express interest in reading about my experiences, so here we are.</p>

<p>The backstory is that I had one app in particular that was on a terrible, terrible web host (like really, the worst) &ndash;and it was for a paid client, at that&ndash; so when the host spent more time offline than online in June, and ignored my numerous support tickets, I decided to take my money elsewhere. The app happened to be a fairly simple website for a non-profit organization, with a members-only area, a way to pay dues and register for events, and a few other odds and ends. On the host-that-shall-remain-nameless this app was running on Adobe ColdFusion 10, and using a local MariaDB. I am not willing to pay the price Adobe charges for their AMIs long term, so I knew I had to convert to Lucee.</p>

<p>Having recently attended the <a href="http://www.devobjective.com/">dev.Objective()</a> conference and subsequently been <a href="http://adamtuttle.codes/TIL-adding-a-jvm-ssl-cert-docker/">playing with Docker</a> I decided I would use it to develop the necessary changes. It really made getting a development environment up and running terribly easy. In fact, I&#39;ve made it this far in my life without <em>properly</em> learning how to install and configure Tomcat, why start now?</p>

<p>And truly, that&#39;s the best part about all of this: <strong>Standing on the shoulders of giants.</strong> My most sincere thanks go to the Lucee team, in particular Geoff Bowers who manages their docker images. Also many thanks to the fine folks in the #lucee and #docker channels on the <a href="http://cfml-slack.herokuapp.com/">CFML Slack</a> who helped me through issues as they would come up.</p>

<p><video src="/assets/images/posts/2016/first-water-landing-720p.webm" controls>
    Sorry, your browser doesn't support embedded videos,
    but don't worry, you can <a href="/assets/images/posts/2016/first-water-landing-720p.webm">download it</a>
    and watch it with your favorite video player!
</video></p>

<p>Right, so after a month of evenings and weekends toiling away at the code changes, I got my local docker container for my app into good shape. I also managed to get a separate container up with MariaDB and network the two together. It worked, but it wasn&#39;t pretty. I had a series of shell scripts to stand it up and hold it together, but nothing I would want to use in production. Most importantly, I had no idea how I would make the DB survive a container restart (it was building from scratch on every start).</p>

<p>For the former problem (my poorly written shell scripts) <a href="https://docs.docker.com/compose/">docker-compose</a> came to the rescue, and for the latter (DB data storage) all I had to do was RTFM. Compose makes it easy to define a set of containers that need to be started and networked together, and manage them. And <a href="https://hub.docker.com/_/mariadb/">the MariaDB docker image docs</a> literally have a heading, &quot;Where to Store Data.&quot;</p>

<p>I&#39;m not going to spell out how those things work in detail, but here&#39;s my <code>docker-compose.yml</code> file:</p>
<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="s">&#39;2&#39;</span>
<span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">web</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">container_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">myapp_web</span>
    <span class="l-Scalar-Plain">restart</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">always</span>
    <span class="l-Scalar-Plain">build</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">./</span>
    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
    <span class="p-Indicator">-</span> <span class="s">&quot;8888:80&quot;</span>
    <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
<span class="hll">    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">./:/var/www/myapp</span>
</span>    <span class="l-Scalar-Plain">links</span><span class="p-Indicator">:</span>
<span class="hll">    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">db:myapp_db</span>
</span>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
        <span class="l-Scalar-Plain">TZ</span><span class="p-Indicator">:</span> <span class="s">&#39;America/New_York&#39;</span>
  <span class="l-Scalar-Plain">db</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">container_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">myapp_db</span>
    <span class="l-Scalar-Plain">restart</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">always</span>
    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mariadb:latest</span>
    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
    <span class="p-Indicator">-</span> <span class="s">&quot;6633:3306&quot;</span>
    <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
<span class="hll">    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">./database:/var/lib/mysql</span>
</span><span class="hll">    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">./res/create-database.sql:/docker-entrypoint-initdb.d/create-databse.sql</span>
</span><span class="hll">    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">./res/myapp.sql:/docker-entrypoint-initdb.d/myapp.sql</span>
</span>    <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
        <span class="l-Scalar-Plain">TZ</span><span class="p-Indicator">:</span> <span class="s">&#39;America/New_York&#39;</span>
        <span class="l-Scalar-Plain">MYSQL_ROOT_PASSWORD</span><span class="p-Indicator">:</span> <span class="s">&#39;godmode&#39;</span>
</code></pre></div>
<p>I&#39;ve highlighted a few of the interesting bits:</p>

<ul>
<li><code>./:/var/www/myapp</code> &mdash; mount the current directory into the into the container as a volume at <code>/var/www/myapp</code>, so that code changes I make on my laptop (because that&#39;s where I have my editor open) are immediately visible in the container.</li>
<li><code>db:myapp_db</code> &mdash; from inside the <strong>web</strong> container, make the <strong>db</strong> container available as hostname <code>myapp_db</code>

<ul>
<li>Not pictured: My Application.cfc has a datasource configured with the following connectionString: <code>&#39;jdbc:mysql://myapp_db:3306/myapp?...&#39;</code>, so you can see that you simply access the linked docker container by hostname.</li>
</ul></li>
<li>mount three volumes for the db container:

<ul>
<li><code>./database:/var/lib/mysql</code> uses the local <strong>database</strong> folder as the storage location for all of the data that MariaDB will create. (Starts out empty)</li>
<li><code>./res/create-database.sql:/docker-entrypoint-initdb.d/create-databse.sql</code> is a script that MariaDB will run on startup if it hasn&#39;t already created any databases (appears to be first-run). In this script I create my database and setup the website user account and privileges. After the first time the container is run, when there is data in the <strong>database</strong> folder, this file will be ignored.</li>
<li><code>./res/myapp.sql:/docker-entrypoint-initdb.d/myapp.sql</code> will run after <code>create-database.sql</code> and is just the most recent production mysqldump prepended with <code>use myapp;</code>. After the first time the container is run, when there is data in the <strong>database</strong> folder, this file will be ignored.</li>
</ul></li>
</ul>

<p>With those two problems solved, I moved on to thinking about how to manage all of this. I settled on a Makefile because I knew it would work both on my local Mac and on Ubuntu, where this will ultimately live. (Credit to <a href="http://www.compoundtheory.com/">Mark Mandel</a> for the idea to use Make in the first place. Smart dude.) Here&#39;s my Makefile:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="hll"><span class="nv">file_date</span> <span class="o">=</span> <span class="k">$(</span>shell date +%Y-%m-%d<span class="k">)</span>
</span>
default:
    docker ps

db-backup:
<span class="hll">    tar czf myapp_db.<span class="k">$(</span>file_date<span class="k">)</span>.tar.gz database
</span><span class="hll">    aws s3 cp myapp_db.<span class="k">$(</span>file_date<span class="k">)</span>.zip s3://myapp/backups/ <span class="o">&amp;&amp;</span> rm -f myapp_db.<span class="k">$(</span>file_date<span class="k">)</span>.zip
</span><span class="hll">    curl https://nosnch.in/my-secret-key
</span>
build:
    docker-compose up -d --build

up:
    docker-compose up -d

bash:
    docker <span class="nb">exec</span> -it myapp_web /bin/bash

logs:
    docker-compose logs -f
</code></pre></div>
<p>Probably the most interesting part of this is the <code>db-backup</code> target. This Makefile is to be used outside of the container, so what this target does is gzip up a copy of the <strong>database</strong> folder and push it into Amazon S3 using their <a href="https://aws.amazon.com/cli/">AWS CLI</a>. Lastly it notifies <a href="http://adamtuttle.codes/the-right-tool-success-notifications/">Dead Man&#39;s Snitch</a> that the backup has run so that I can sleep soundly. Should we ever need to restore the database, it should be as simple as unzipping the appropriate backup file into the database folder and starting the container.</p>

<p><img src="/assets/images/posts/2016/sit-flying-1.jpg" alt="Nginx welcome screen"></p>

<h3>All Problems Solved. Time to Go to Production!</h3>

<p>I spent a lot of time over the last month thinking about this. Despite being interested in Google&#39;s cloud offerings, I had already sold my client on AWS so I knew I was going to be hosting it there. But should I use their <a href="https://aws.amazon.com/ecs/">EC2 Container Service</a>? If not that, then what? I am aware of Kubernetes but suspect it would be easier to use on Google&#39;s cloud than Amazon&#39;s. Mostly this whole config was just a big question mark for me.</p>

<p>One thing I did know is that scaling is <em>just not an issue</em>. This app will only ever need one container and that&#39;s it. I don&#39;t need a cluster, I just need something that will restart it on the off chance the process dies. (That&#39;s what <code>restart: always</code> does in docker-compose, by the way.) So while it would be fun to run some sort of clustered setup, it would be the very definition of overkill.</p>

<p>For that reason, I decided to go with a standard vanilla Ubuntu AMI, on which I installed Git, Docker, and the AWS CLI. Because of the agreement I negotiated with my client, I knew I wanted a <code>3-year-reserved-full-upfront</code> EC2 instance, to save money over the on-demand prices. I&#39;ve used EC2 before, but never reserved instances, so that was another question mark. Like many things AWS, it makes sense once you understand how it works but was not immediately obvious without reading the documentation very carefully.</p>

<h4>Getting a Reserved EC2 Instance</h4>

<p>Reserved instances are kind of funny. When you buy it, you&#39;re not buying an EC2 instance: You&#39;re buying the contract to host an EC2 instance of a certain type, for a certain time period, in a certain location. For example, a <code>t2.large</code> for three years in <code>us-east-1d</code>. The clock starts ticking as soon as the payment form is submitted, so if it were to take a week for you to stand that instance up, you just donated a week&#39;s hosting costs to Amazon. Be ready to start that instance before you submit your payment so that you can switch tabs and start it immediately.</p>

<p>The Reserved Instance contracts (I&#39;m just calling them contracts, I don&#39;t know if there&#39;s a more official nomenclature) are sold on a sort of marketplace. I had heard that if you buy 3 years but end up wanting to terminate early, you&#39;re allowed to sell the remainder on the marketplace &mdash; I just didn&#39;t know how or where to do that. When I was searching for my contract, I only found one option to buy from &quot;3rd party&quot; rather than Amazon.</p>

<p>From there, it works just like any other EC2 instance: save your key file and then connect to the server with SSH: <code>ssh -i ~/.ssh/my_server-root.pem ubuntu@ec2-{my-ip-address}.compute-1.amazonaws.com</code>.</p>

<h3>Setting up My Server</h3>

<p>The first thing I needed to do was <a href="https://docs.docker.com/engine/installation/linux/ubuntulinux/">install Docker on Ubuntu</a>, which was pretty straight-forward:</p>

<p>All of the below commands are taken from the above Docker on Ubuntu link, after parsing out which commands were necessary for Ubuntu 14.04 Trusty. If you&#39;re on a different version, make sure to follow the right docs. And I&#39;m probably running <code>apt-get update</code> more than is strictly necessary, but it was repeated in the guide and I didn&#39;t see any harm in running it again, so I just followed instructions. (Standing on the shoulders of giants, remember?)</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>uname -r
3.13.0-95-generic
</code></pre></div>
<p>Great news! I&#39;m on a recent enough kernel!</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>sudo apt-get update
<span class="nv">$ </span>sudo apt-get install apt-transport-https ca-certificates
<span class="nv">$ </span>sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
<span class="nv">$ </span>sudo <span class="nb">echo</span> <span class="s2">&quot;deb https://apt.dockerproject.org/repo ubuntu-trusty main&quot;</span> &gt; /etc/apt/sources.list.d/docker.list
<span class="nv">$ </span>sudo apt-get update
<span class="nv">$ </span>apt-cache policy docker-engine
<span class="nv">$ </span>sudo apt-get install linux-image-extra-<span class="k">$(</span>uname -r<span class="k">)</span> linux-image-extra-virtual
<span class="nv">$ </span>sudo apt-get install docker-engine
<span class="nv">$ </span>sudo service docker start
<span class="nv">$ </span>sudo docker run hello-world
</code></pre></div>
<p>Also from that guide:</p>

<blockquote>
<p>For [Ubuntu] 14.10 and below the above installation method automatically configures upstart to start the docker daemon on boot</p>
</blockquote>

<p>... Nice! One less thing to figure out. At this point I was thinking something like, &quot;So the Docker daemon will autostart, but how am I going to make sure my containers autostart, too?&quot; Spoiler alert: I restarted my instance with the containers running and when everything came back up they were brought up too. 👌</p>

<p>At this point I&#39;ve got Docker running but no docker-compose. Coming from a Mac I was surprised they didn&#39;t come bundled together. I was even more surprised that compose wasn&#39;t available through apt. Fortunately it was easy enough to google up some instructions on <a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-compose-on-ubuntu-14-04">installing docker-compose on Ubuntu 14.04</a>.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="hll"><span class="nv">$ </span>sudo usermod -aG docker <span class="k">$(</span>whoami<span class="k">)</span>
</span><span class="nv">$ </span>sudo apt-get -y install python-pip
<span class="nv">$ </span>sudo pip install docker-compose
<span class="hll"><span class="nv">$ </span>which docker-compose <span class="o">&amp;&amp;</span> docker-compose --version
</span></code></pre></div>
<p>The <code>usermod</code> line adds the current user (ubuntu) to the <code>docker</code> group, which prevents the need to use sudo every time I want to run a docker command. The last line shows where the compose executable is found and prints its version, just to confirm that all is well.</p>

<p>And now to install the aforementioned AWS CLI:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>sudo pip install awscli
</code></pre></div>
<h3>Configuring My App</h3>

<p>Now that all of the pre-requisites are satisfied, it&#39;s time to get my containers running and verify that my app is working. I cloned my git repo to <code>/opt/myapp</code> and then <code>chown -R ubuntu ubuntu /opt/myapp</code> so that sudo isn&#39;t required for simple things like getting the latest code with <code>git pull</code>.</p>

<p>I have both my <code>Dockerfile</code> for building my web container and my <code>docker-compose.yml</code> in the root of my repo, so it was as simple as <code>cd /opt/myapp &amp;&amp; docker-compose up</code> to start them.</p>

<p>Once the containers were done building, I confirmed that the web container was serving the website on port 8888. Internal to the container it&#39;s listening on port 80, but that port is being shared on the host as 8888, as you can see in my <code>docker-compose.yml</code> config above. From the host I make an HTTP request to localhost:8888:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>wget localhost:8888 -O /dev/null
Resolving localhost <span class="o">(</span>localhost<span class="o">)</span>... 127.0.0.1
Connecting to localhost <span class="o">(</span>localhost<span class="o">)</span><span class="p">|</span>127.0.0.1<span class="p">|</span>:8888... connected.
HTTP request sent, awaiting response... <span class="m">200</span> OK
Length: <span class="m">19789</span> <span class="o">(</span>19K<span class="o">)</span> <span class="o">[</span>text/html<span class="o">]</span>
Saving to: ‘/dev/null’

100%<span class="o">[==========================================</span>&gt;<span class="o">]</span> 19,789      --.-K/s   in 0s

2016-09-05 09:56:39 <span class="o">(</span><span class="m">173</span> MB/s<span class="o">)</span> - ‘/dev/null’ saved <span class="o">[</span>19789/19789<span class="o">]</span>
</code></pre></div>
<p>Awesome, it&#39;s working!</p>

<h4>Reverse Proxy</h4>

<p>This part isn&#39;t strictly necessary. If I only wanted to run this one thing on the server I could just directly expose the container&#39;s port 80 as the server&#39;s port 80 and call it a day. But putting a reverse-proxy in the middle allows me to add more containers to this server to do other things, which I hope to do in the near future. So I quickly wrapped it up in an <a href="https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-14-04-lts">Nginx</a> reverse proxy:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>sudo apt-get install nginx
</code></pre></div>
<p>Once installed, Nginx is already running:</p>

<p><img src="/assets/images/posts/2016/nginx-welcome.png" alt="Nginx welcome screen"></p>

<p>I didn&#39;t spend a lot of time searching out the best Nginx Reverse Proxy tutorial; it was something that was pretty easy to figure out from just the hints in the <a href="https://www.digitalocean.com/community/tutorials/how-to-configure-nginx-as-a-web-server-and-reverse-proxy-for-apache-on-one-ubuntu-14-04-droplet">2nd google result</a> (jump down to &quot;Step 7&quot;).</p>

<p>I deleted the symlink at <code>/etc/nginx/sites-enabled/default</code> to disable the welcome screen, then added my own <code>/etc/nginx/sites-available/myapp.com</code> file with this content:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">server {
    listen 80 default_server;

    server_name myapp.com www.myapp.com aws.myapp.com;

    location / {
        proxy_pass http://127.0.0.1:8888;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
</code></pre></div>
<p>Then symlink this file into <code>/etc/nginx/sites-enabled/</code>, and restart nginx. This will proxy all requests to my container that&#39;s listening on port 8888, which is good enough for now!</p>

<h3>Remaining Problems</h3>

<p>Something&#39;s wonky with the system time inside the docker container. By default it comes up as UTC. My host was also UTC. I live in US/Eastern and my client is in US/Eastern so it just makes things easier for my servers to use US/Eastern, too. (Though really, <a href="https://youtu.be/-5wpm-gesOY">Timezones can die in a fire for all I care</a>.)</p>

<p>But I noticed this in the Lucee admin overview at around 22:33 (10:33pm) on Sept 4th:</p>

<p><img src="/assets/images/posts/2016/docker-lucee-time.png" alt="Nginx welcome screen"></p>

<p>What&#39;s odd is that it&#39;s ahead by ten hours (The container and the host were both in UTC at the time). I changed both to use Timezone <code>America/New_York</code> and restarted both the host and the containers, but that doesn&#39;t seem to have helped. Setting the Timezone in the MariaDB container seems to have worked: <code>select current_timestamp;</code> returns my current local time, so I have to imagine there&#39;s some disconnect between the system time and Lucee.</p>

<p>Just to verify I did add a comment to a view where I spit out the current value of <code>#now()#</code> and it matches what I see in the Lucee dashboard. So the website thinks that the time is off by a few hours. Not ideal, but I can live with it while I work with the folks in #lucee and #docker to find a fix.</p>

<p>I initially made some scripting changes to my Dockerfile to set the timezone and install NTP, but later found some advice to set an environment variable named <code>TZ</code> with the desired Timezone. That worked too (in that <code>$ date</code> reported the desired date &amp; time), so I ripped out the Dockerfile changes. The environment variable approach works for the MariaDB container too, an added bonus.</p>

<h3>Conclusion</h3>

<p>Soup to nuts, it went surprisingly smoothly. Aside from the Timezone/system time issue, I finished all of that in a day. I started at about 9:00am, took short breaks for lunch and dinner, and finished before 10:00pm. I had mentally prepared myself to stay up until the wee hours of the morning pulling out what&#39;s left of my hair, as I usually would in a similar situation, but it just wasn&#39;t necessary. The time that I saved, I turned around and used to write this blog post. 🤓</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">I mean, it&#39;s also not even 10:00pm... This is just not how I envisioned my night going.<br><br>I&#39;ll allow it. <a href="https://t.co/iDwVd8PXgv">pic.twitter.com/iDwVd8PXgv</a></p>&mdash; Adam Tuttle (@AdamTuttle) <a href="https://twitter.com/AdamTuttle/status/772607180721750018">September 5, 2016</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

	  ]]></description>
	</item>

	<item>
	  <title>I Think Donald Trump Is an Idiot, but That Doesn't Mean I Think You Are</title>
	  <link>//trump-is-an-idiot-but-you-arent/</link>
	  <author>Adam Tuttle</author>
	  <pubDate>2016-07-07T08:15:00-04:00</pubDate>
	  <guid>//trump-is-an-idiot-but-you-arent/</guid>
	  <description><![CDATA[
	     <p>There are a few moments in my life where I feel like I have truly grown as a person. Usually when I learn something profound and it sinks in immediately, and it&#39;s like a lightbulb has lit up over my head. I can think of at least two such moments that happened when I re-watched The West Wing early this year.</p>

<p>The first of which, and the one I want to talk about today, happened as I watched Episode 7 of Season 2, &quot;The Portland Trip.&quot; I&#39;ve embedded a random copy of it that I found online below. You <em>could</em> watch the entire episode, but if you want to jump straight to the part that I&#39;m thinking of, it starts at about the 27 minute mark.</p>

<p>(The West Wing is available on Netflix and I can&#39;t recommend it enough, regardless of your personal politics. You can also <a href="https://www.youtube.com/watch?v=cI9HhNjXLu4">rent it on YouTube</a>.)</p>

<p><object width="576" height="432"><param name="movie" value="http://www.flasharc.com/bpr.swf"></param><param name="allowfullscreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.flasharc.com/bpr.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="576" height="432"></embed></object></p>

<p>And here&#39;s a transcript from <a href="http://www.westwingtranscripts.com/search.php?flag=getTranscript&amp;id=29">WestWingTranscripts.com</a>:</p>

<blockquote>
<p><strong>SKINNER:</strong>
Ask me the question.</p>

<p><strong>JOSH:</strong>
He compared homosexuality to kleptomania and sex addition, Matt.</p>

<p><strong>SKINNER:</strong>
Yes.</p>

<p><strong>JOSH:</strong>
The Majority Leader. The leader of your own party.</p>

<p><strong>SKINNER:</strong>
He was wrong and I told him so.</p>

<p><strong>JOSH:</strong>
For cryin&#39; out loud!</p>

<p><strong>SKINNER:</strong>
Ask me the question, Josh!</p>

<p><strong>JOSH:</strong>
How can you be a member of this party?!?</p>

<p><strong>SKINNER:</strong>
You&#39;ve been holding that in for way too long, man.</p>

<p><strong>JOSH:</strong>
This party who says that who you are is against the law.</p>

<p><strong>SKINNER:</strong>
You know, I never understand why you gun control people don&#39;t all join the
N.R.A. They&#39;ve
got two million members. You bring three million to the next meeting... call
a vote...
All those in favor of tossing guns - [Snaps fingers] - Bam! Move on.</p>

<p><strong>JOSH:</strong>
That&#39;s a heck of a strategy, Matt. I&#39;ll bring that up in a meeting.</p>

<p>Josh sighs heavily as he collapses into his chair.</p>

<p><strong>SKINNER:</strong>
I agree with 95% of the Republican platform. I believe in local government. I&#39;m
in favor
of individual rights rather than group rights. I believe free markets lead
to free people
and that the country needs a strong national defense. My life doesn&#39;t have
to be about
being a homosexual. It doesn&#39;t have to be entirely about that.</p>

<p>Josh looks at Skinner thoughtfully before deciding not to continue.</p>

<p><strong>JOSH:</strong>
Thanks for coming by.</p>
</blockquote>

<p>With the benefit of hindsight I can say that on many occasions in my life I&#39;ve thought about specific people as the embodiment of their position on a divisive issue: abortion, gun control, religious freedom, and yes, sexual equality.</p>

<p>When you are hyper focused on a single issue, especially when thinking about someone else, it becomes easy to forget about everything other than that issue; just as Josh Lyman did in the scene transcribed above. But we are all people. Human beings. With an infinite number of thoughts and emotions and desires and needs all struggling to find a place in our priorities. None of us does a perfect job of balancing those out; we all just do the best that we can with the information we&#39;ve got at the time.</p>

<p>I look at Donald Trump and see a privileged, racist, xenophobic, small-minded, and short-sighted individual whom I am terrified still has a chance of holding our Executive Office. At face value it can be mind blowing.</p>

<p>But you (and I mean that to be directed at his supporters) are just people. You have your own priorities based on your own wants and needs and emotions. I mean, maybe you&#39;re an open white supremacist and you like him because he shares your views on immigration. Or maybe you truly believe that Hillary Clinton is going to do something that you view as evil and voting Trump is your way of fighting back. It&#39;s also possible that you strongly believe in small government and free markets but you&#39;re tired of career politicians who turn their back on you the minute they&#39;re sworn into office. These are all legitimate reasons to support Trump, and it is your right to do so.</p>

<p>It would be easy to alias &quot;Trump Supporter&quot; to &quot;Racist Xenophobic Idiot&quot; in my brain, and I admit I have once or twice had those thoughts when seeing some of the coverage of his campaign and supporters. But that is not being honest to what I know to be true.</p>

<p>We&#39;re all just people, and we aren&#39;t defined by who we support in an election.</p>

	  ]]></description>
	</item>

	<item>
	  <title>TIL: Adding an SSL Cert to the JVM Inside a Docker Image</title>
	  <link>//TIL-adding-a-jvm-ssl-cert-docker/</link>
	  <author>Adam Tuttle</author>
	  <pubDate>2016-06-27T09:00:00-04:00</pubDate>
	  <guid>//TIL-adding-a-jvm-ssl-cert-docker/</guid>
	  <description><![CDATA[
	     <p>I&#39;ve been playing with Docker lately for a bunch of reasons, but topping that list is that it&#39;s everything I ever wanted out of Vagrant, and then some. (And what better thing to do on a camping trip after the kids are tucked into bed?) In some ways, the Dockerfile syntax is what I wish the Vagrantfile syntax was (shell script instead of Ruby). Anyway, here&#39;s a solution to an interesting problem I ran into today.</p>

<p>I need to make HTTP requests to the <a href="https://mailgun.com/app/dashboard">mailgun</a> API and their certificate isn&#39;t valid given the JVM cert store that I&#39;m inheriting in my Docker image. Of course, I just need to <a href="http://stackoverflow.com/a/36427118/751">download and import the certificate</a><sup>[1]</sup>, but it took me a little while to wrap my mind around the idiomatic Docker way of doing this.</p>

<p>After some hints from <a href="http://ryanguill.com/">Ryan</a> (to whom I owe cases and cases of beer for similarly helpful advice), and a little more googling and trial and error, this is what I came up with. In my Dockerfile, I&#39;ve added:</p>
<div class="highlight"><pre><code class="language-Dockerfile" data-lang="Dockerfile">COPY ./res/mailgun.net.crt /opt/lucee/
<span class="k">ENV</span> LUCEE_CACERTS /opt/lucee/server/lucee-server/context/security/cacerts
<span class="k">RUN</span> keytool -noprompt -storepass password_here -import -alias mailgun -keystore <span class="k">${</span><span class="nv">LUCEE_CACERTS</span><span class="k">}</span> -file /opt/lucee/mailgun.net.crt
</code></pre></div>
<p>After copying my downloaded mailgun certificate file into the Docker image, I use the <code>keytool</code> command with options <code>-noprompt -storepass</code> to import it without prompting me for the store password.</p>

<p>As a refresher, to find all <code>cacerts</code> files on your (linux) machine, try this:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">find / -iname &#39;cacerts&#39;
</code></pre></div>
<p>This will list all files named cacerts on the system. In my Docker image, there were 4. I picked the one associated with <a href="http://lucee.org/">Lucee</a> because that&#39;s the app server I&#39;m working with in this case, but it&#39;s possible that importing to the JVM&#39;s store could have worked too. I just got lucky on my first guess, so I stopped there.</p>

<hr>

<p><small>1: On OSX I was able to download the certificate with Firefox following <a href="http://stackoverflow.com/a/36427118/751">these instructions</a>, and while I did select the &quot;der&quot; export type, it saved as a .crt file. Java did not complain about importing this file.</small></p>

	  ]]></description>
	</item>

	<item>
	  <title>Cobbler's Children Syndrome</title>
	  <link>//cobblers-children-syndrome/</link>
	  <author>Adam Tuttle</author>
	  <pubDate>2016-05-05T12:30:00-04:00</pubDate>
	  <guid>//cobblers-children-syndrome/</guid>
	  <description><![CDATA[
	     <p>My old blog at <a href="http://fusiongrokker.com">fusiongrokker.com</a> was recently offline for more than 230 consecutive hours. Partly, the hosting company is to blame for this. I pay them for a service: A server, connected to the internet, with electricity; and this service was not being properly provided. But partly it is my own fault too.</p>

<p>230 hours is nine and a half days. At what point should I have decided to give up on them coming back online (after my numerous support tickets and phone calls went unanswered) and restored my website onto a new web host from my most recent backups? Well, before you can answer that question it&#39;s important to note that I didn&#39;t have backups. At least nothing recent.</p>

<p>Oops.</p>

<p>Fortunately, the server is back online now. Yes, I immediately made a backup of both the database and the files for the website. Fortunately, it&#39;s not changing in any meaningful way. Maybe a stray comment or two on old articles. Nothing I&#39;ll be overly worried about losing. And I intend to get it all converted over to this new blog eventually, with proper redirection from the old URLs. Eventually.</p>

<p>Eventually. That&#39;s the word that got me into trouble in the first place. Cobbler&#39;s Children Syndrome.</p>

<blockquote>
<p>The cobbler&#39;s children have no shoes</p>
</blockquote>

<p>This is a <a href="http://tvtropes.org/pmwiki/pmwiki.php/Main/TheCobblersChildrenHaveNoShoes">common trope</a> that most people have probably heard of. On the off chance that you&#39;re one of today&#39;s <a href="https://xkcd.com/1053/">lucky 10,000</a>, it goes something like this: The cobbler, who makes shoes for a living &mdash;for some combination of reasons&mdash; doesn&#39;t provide shoes for her own children.</p>

<p>And it&#39;s not that big of a deal, most of the time. You can walk around most areas barefoot without too much trouble, aside from stores that won&#39;t let you in without shoes. But the problem with this mentality is that it fails you when you&#39;re desperate. When you find yourself facing a road litered with shards of glass and no choice but to cross it. You&#39;ll be cursing your former self for not investing in some shoes.</p>

<p>So it was with my blog&#39;s backups. Of course I had backups of <em>important</em> stuff. Things that <em>make me money</em>, like <a href="http://www.restassuredbook.com">my book</a> and websites I&#39;ve made for freelance clients. At face value, my personal blog didn&#39;t sound so important. <em>I&#39;ll get to it eventually</em>, I&#39;d think to myself.</p>

<p>Eight years later... that didn&#39;t work out so well for me.</p>

<p>I have no idea how much google-juice those old blog entries lost in the 9.5+ days they were offline, but it was definitely non-zero. I had friends tell me that they couldn&#39;t even find my blog in google search results if they were specifically searching for it. Crap.</p>

<p><img src="/assets/images/posts/2016/just_do_it.gif" alt="just do it"></p>

<p>So now it&#39;s a priority. Which is to say that it&#39;s been prioritized, somewhere near, but not at the top of, my list. I do have to keep doing things that pay the bills first. But after those, this is uh, one of, my top priorities.</p>

<p>There are a lot of things that we as software developers are prone to let slide like this. Version controlling tiny little side projects is another example. And there&#39;s only one appropriate response when addressing these questions in your head. There&#39;s really no other answer you can give.</p>

<p>Just do it.</p>

	  ]]></description>
	</item>

	<item>
	  <title>"Fork Me on GitHub" Stickers</title>
	  <link>//fork-me-stickers/</link>
	  <author>Adam Tuttle</author>
	  <pubDate>2016-04-20T10:00:00-04:00</pubDate>
	  <guid>//fork-me-stickers/</guid>
	  <description><![CDATA[
	     <p>I have been going a little sticker-crazy lately, and I decided I wanted a &quot;Fork Me&quot; sticker, ala GitHub&#39;s <a href="https://github.com/blog/273-github-ribbons">Fork Me ribbons</a> (pro-tip: use <a href="https://github.com/aral/fork-me-on-github-retina-ribbons">these retina-friendly ones instead</a>) that are common for OSS developers to put onto their websites or their project websites. I couldn&#39;t find one anywhere, so I made one, and now you too can emblazon your favorite things with a &quot;Fork Me&quot; ribbon sticker.</p>

<p><a href="https://www.stickermule.com/marketplace/11734-fork-me"><img src="/assets/images/posts/2016/fork-me-screen-shot.png" alt="Fork Me ribbon sticker now available on StickerMule!"></a></p>

<p align="center"><a href="https://www.stickermule.com/marketplace/11734-fork-me">Click here to get yours!</a></p>

	  ]]></description>
	</item>

	<item>
	  <title>The Right Tool for the Job: Success Notifications</title>
	  <link>//the-right-tool-success-notifications/</link>
	  <author>Adam Tuttle</author>
	  <pubDate>2016-03-14T05:30:00-04:00</pubDate>
	  <guid>//the-right-tool-success-notifications/</guid>
	  <description><![CDATA[
	     <p>In what I hope is the first in a long series of short posts describing small steps I&#39;m taking to <em>do the right thing&trade;</em>, today I want to talk about eliminating <em>yet another email notification</em>. In a way I guess you could say I&#39;m on a campaign against email, at least as a method of anything other than async remote communication.</p>

<p>Back in the dark ages of 2013 I gave a conference presentation on an open source tool that I use called <a href="http://www.bugloghq.com/">BugLogHQ</a>, an alternative to sending yourself emails containing debug information when an exception occurs in your app &ndash; and I hasten to reiterate: one with many advantages. My team and I still use BLHQ to this day, and it is remarkably better than emailing error debug information. <a href="/errors-are-best-when-emailed-said-nobody-ever/">You can see the conference session abstract and the slides here</a>. Not as good as being there, but it should give you an idea of how great BLHQ can be, comparatively.</p>

<p>Having solved the error logging problem, the next thing that shows up in my email occasionally, ripe for disruption, is <em>success notifications</em> for scheduled jobs like database backups, and membership expiration reminders. What these types of notifications need is not a success notification, but a failure notification. Hopefully error logging catches any errors that occur during those jobs, but what happens if the cron job gets disabled?</p>

<p><em>Will you notice that you didn&#39;t get that email last night when the backups should have run?</em></p>

<p>What you really need in this situation is a <a href="https://en.wikipedia.org/wiki/Dead_man%27s_switch">dead man&#39;s switch</a>. These take many forms, but at their simplest you can think of them as a grenade with the pin removed. If you loosen your grip and the &quot;spoon&quot; is released from the grenade ... boom. In digital form, releasing the spoon would be your scheduled job missing a &quot;check in,&quot; and the boom would be a notification that your job hasn&#39;t run on schedule.</p>

<p><img src="/assets/images/posts/2016/brain_grenade.jpg" alt="Grenade">
<small>Photo credit: <a href="https://www.flickr.com/photos/lapolab/16833901255/">lapolab</a></small></p>

<p>Enter <a href="https://deadmanssnitch.com/r/228ab4a26f">Dead Man&#39;s Snitch</a>. This app actually started out as a side project for a local Philly entrepreneur and aquiantance of mine; and I like to support local businesses, especially when they&#39;re awesome. DMS is a web service that your job calls to &quot;check in&quot; via a simple HTTP GET request. Miss a check in and they&#39;ll let you know. There are a bunch of different schedules available, and at varying price levels you get access to different integrations (i.e. Slack).</p>

<p>There are a few nuances that I&#39;m leaving out to keep this simple, so if you&#39;re interested or just have questions, go <a href="https://deadmanssnitch.com/r/228ab4a26f">check out the site</a> for more information. And hey, maybe give the service a shot: you get 1 snitch for free into perpetuity, so why not?</p>

<p><small><em>Disclosure: The links in this post, while not a paid advertisement, are referral links. If you sign up for an account then I get a free snitch for my account. Obviously I think the service is pretty great: I have a paid account for personal use as well as a paid account for my business; and I&#39;m hoping you will sign up too. But if referral links just aren&#39;t your thing, <a href="https://deadmanssnitch.com/">here&#39;s a clean one</a>.</em></small></p>

	  ]]></description>
	</item>

	<item>
	  <title>Welcome to OSX, 2016 Edition</title>
	  <link>//welcome-to-osx-2016-edition/</link>
	  <author>Adam Tuttle</author>
	  <pubDate>2016-01-08T08:30:00-05:00</pubDate>
	  <guid>//welcome-to-osx-2016-edition/</guid>
	  <description><![CDATA[
	     <p>Recently a friend told me that he had switched to a Mac full time and asked if I had any advice for software, or just in terms of general usage. I would have swarn that I already had a blog post on the topic that I wanted to link to him (outdated though it may be), but try as I might I couldn&#39;t find it. So here we go, I&#39;m starting from scratch!</p>

<h2>Fundamental Improvements: TotalFinder, iTerm2, and TotalSpaces</h2>

<p>I find the default experience with Finder to be grating. In my Windows days I used <a href="http://www.ghisler.com/">TotalCommander</a> almost exclusively to deal with the File System, and I had memorized tons of keyboard shortcuts to the point where I almost never needed the mouse. There exists a similar app for OSX, called <a href="http://www.cocoatech.com/pathfinder/">Path Finder</a>, <em>which I don&#39;t use.</em> I first stumbled on Path Finder before I was really able to afford spending a bunch of money on apps like that (I bought my first Mac, a base-model 12&quot; macbook, refurbished, on Black Friday). In the interim I started using a free app that made my terminal into a Visor (more on that next), and then later the same developer introduced <a href="http://totalfinder.binaryage.com/">TotalFinder</a>.</p>

<p>I can&#39;t say enough good things about TotalFinder: Almost everything that gets on my nerves about the default Finder melts away with TF. I use it as a Visor (pops up from the bottom of my screen when I hit a global keyboard shortcut), frequently use the &quot;dual mode&quot; of side-by-side finders, love the Chrome tabs, and I&#39;m <em>so</em> happy to be able to force folders to sort to the top. There are many more features, but even just those alone are worth the $9 license to me.</p>

<p>Now back to that Terminal visor. BinaryAge, developers of TotalFinder, also had a free product called <a href="http://totalterminal.binaryage.com/">TotalTerminal</a> (no longer actively developed and not compatible with OSX 10.11+) which, for me, harkened back to my days playing the original Quake. With my global keyboard shortcut <code>ctrl+`</code>, an always-available terminal window would slide down from the top of the screen to await my commands. Very handy. For reasons surrounding Zsh and Oh-my-zsh, I&#39;ve abandoned the default OSX terminal app in favor of <a href="https://www.iterm2.com/">iTerm2</a>, which is much more customizable and also supports the Visor feature.</p>

<p>I have <code>alt+&grave;</code> configured as my Finder visor shortcut, and <code>ctrl+&grave;</code> for my terminal. That&#39;s the &quot;back-tick&quot; or &quot;grave&quot; character &ndash; the one above my TAB key and what you get if you omit the Shift key when typing <code>~</code>. These two things are core to the way I work on my laptop, and being on a machine without them slows me down and trips me up significantly.</p>

<p>I also use <a href="http://totalspaces.binaryage.com/">TotalSpaces</a>, though I flip between phases where I prefer everything to have its own space and everything in one space with just <code>cmd+tab</code> to switch between them. Currently the latter. Regardless, TotalSpaces is worth $9 to get back the awesome Exposé functionality from the days before Lion. <a href="http://fusiongrokker.com/post/what-i-hate-about-osx-lion-s-mission-control">I really hate Mission Control</a>.</p>

<h2>Developer Stuff</h2>

<p>In my terminal, I prefer to use Zsh with <a href="http://ohmyz.sh/">Oh-my-zsh</a>. There are dozens of great plugins and even more themes to choose from.</p>

<p>I write my code in <a href="http://www.sublimetext.com/3">Sublime Text 3</a>, and also keep my eye on <a href="https://atom.io/">Atom</a> though the plugin ecosystem is still too lacking to make it my daily driver. I have already documented <a href="http://fusiongrokker.com/post/my-sublime-keymap-common-kb-shortcuts">my sublime keymap</a> pretty thoroughly. Plugins, all available through package control:</p>

<ul>
<li>AdvancedNewFile</li>
<li>AutoFileName</li>
<li>AutoSpell</li>
<li>Babel</li>
<li>Babel snippets</li>
<li>ColdFusion (sigh)</li>
<li>Color Highlighter</li>
<li>GitGutter</li>
<li>GutterColor</li>
<li>Indent XML</li>
<li>JavaScriptNext - ES6 Syntax</li>
<li>JSCS-Formatter</li>
<li>JSHint Gutter</li>
<li>LESS</li>
<li>Material Theme</li>
<li>Number King</li>
<li>Package Control</li>
<li>React Templates</li>
<li>ReactJS Snippets</li>
<li>SideBarEnhancements</li>
<li>SublimeLinter</li>
<li>SublimeLinter-jscs</li>
</ul>

<p>I also write my blog posts in Sublime using Markdown. It&#39;s all <a href="https://github.com/atuttle/blog">hosted on GitHub</a>, actually. For managing MySQL databases (local and remote) I use <a href="http://www.sequelpro.com/">Sequel Pro</a>.</p>

<p>Pretty much everything else that I use near-daily is <a href="https://nodejs.org/">Node.js</a> and node modules. I currently use Grunt pretty heavily to do LESS, Handlebars.js, and Browserify compiling, along with a few other things (sourcemaps, <a href="http://adamtuttle.codes/modern-cache-busting-for-the-platforms-of-yeasteryear/">cache busting</a>, etc); but I see myself moving toward Gulp/Webpack in the future. Just need time to learn them. If you just need to stand up a quick basic static-file web server in a random directory, I like <a href="https://github.com/knpwrs/nws">nws</a>.</p>

<p>Do enough Node stuff and eventually you&#39;ll run into native modules that require compiling locally on your system. That, or if you do any iOS development at all (even with PhoneGap), you&#39;re going to need XCode. Better to just bite the bullet early and install it / update it as needed through the App Store.</p>

<p>On the off chance that you need an (S)FTP/S3 client, <a href="https://panic.com/transmit/">Transmit</a> is pretty good.</p>

<p><a href="https://itunes.apple.com/us/app/microsoft-remote-desktop/id715768417?mt=12">Microsoft Remote Desktop</a> is actually reasonably good for managing a few windows boxes remotely. And if you need to test something in Internet Explorer, you can get free virtual machines for most flavors from <a href="https://dev.windows.com/en-us/microsoft-edge/tools/vms/mac/">modern.ie</a>. I use <a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox</a> for my VM&#39;s.</p>

<p>Most of the time I do my Git work in the terminal, but occasionally I&#39;ll want a GUI for block-level staging or history browsing. In those cases I like <a href="https://www.sourcetreeapp.com/">SourceTree</a>.</p>

<p>I use Keynote for presentations where I won&#39;t be doing any live code demos, or various web presentation frameworks when I am.</p>

<h2>Other Great Stuff</h2>

<p>You <em>will not find a better password manager</em> than <a href="https://agilebits.com/onepassword">1Password</a>. Fast, secure, and beautiful to boot. Integrates really well with major browsers and has system keyboard shortcuts for quick access. They even have an Android Keyboard that makes accessing your passwords on the go a snap. I bought a family license and forced it on my wife and mom, too. When my kids are old enough to start having passwords for stuff, they&#39;ll be forced into it too.</p>

<p>All of the computers in my house backup to <a href="https://www.backblaze.com/">Backblaze</a>.</p>

<p>For email, I&#39;ve tried a bunch over the years. None are ever as good as straight up webmail. That said, <em>all</em> of my email is through Google Mail. If you have a work Exchange server or something, I can understand why you would want a local native client. I just don&#39;t have a recommendation for you.</p>

<p>I have access to somewhere between half a dozen and a dozen calendars, and coordinating them can be a real pain. I really like <a href="https://calendar.sunrise.am/">Sunrise Calendar</a> and was deeply saddened to hear that they were aqui-hired and will be shutting down the public facing options eventually.</p>

<p>For a basic running todo list I use <a href="https://en.todoist.com/">Todoist</a>. I tried premium but didn&#39;t feel the added features were worth it to me. For taking notes, I like <a href="http://writeapp.net/mac/">Write</a>. I sync them with DropBox so that they are also available on my iPod and iPad.</p>

<p>I use <a href="https://www.libreoffice.org/">LibreOffice</a> for office documents. Whatever you do, <a href="http://www.theguardian.com/technology/askjack/2015/sep/03/switch-openoffice-libreoffice-or-microsoft-office">don&#39;t use OpenOffice</a>!</p>

<p>If I need to record some or all of my screen, I always use QuickTime Player (should come on your Mac). I don&#39;t do a ton of video editing yet, so iMovie is still sufficient for my needs. I see <a href="http://www.apple.com/final-cut-pro/">FinalCut</a> in my future, though. Just like Windows, the best video player is <a href="http://www.videolan.org/vlc/index.html">VLC</a> hands down.</p>

<p>Need to figure out what&#39;s eating up so much disk space? Try <a href="http://www.derlien.com/">Disk Inventory X</a>.</p>

<p>I don&#39;t have any scientific data to back this up, but subjectively I feel like my eyes are <em>way</em> less strained working on the computer late at night with <a href="https://justgetflux.com/">Flux</a>. It reddens (de-blues?) your screen more as more time passes after sunset.</p>

<p>Have you got more great app suggestions? <a href="https://twitter.com/adamtuttle">Let me know what they are!</a></p>

	  ]]></description>
	</item>


</channel>
</rss>
